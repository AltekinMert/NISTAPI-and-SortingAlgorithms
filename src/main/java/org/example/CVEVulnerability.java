package org.example;

import org.jetbrains.annotations.NotNull;

public class CVEVulnerability implements Comparable<CVEVulnerability> {
    public Cve cve;
    // Getter and Setter methods
@Override
    public int compareTo(@NotNull CVEVulnerability other) {
    if (this.cve == null || this.cve.metrics == null || this.cve.metrics.cvssMetricV2 == null) {
        return -1; // Handle null values by considering them smaller
    }

    if (other.cve == null || other.cve.metrics == null || other.cve.metrics.cvssMetricV2 == null) {
        return 1; // Handle null values by considering them smaller
    }
        // Compare based on baseScore
        int baseScoreComparison = Double.compare(this.cve.metrics.cvssMetricV2.get(0).cvssData.baseScore,
                other.cve.metrics.cvssMetricV2.get(0).cvssData.baseScore);
        if (baseScoreComparison != 0) {
            return baseScoreComparison;
        }

        // If baseScore is the same, compare based on impactScore
        int impactScoreComparison = Double.compare(this.cve.metrics.cvssMetricV2.get(0).impactScore,
                other.cve.metrics.cvssMetricV2.get(0).impactScore);
        if (impactScoreComparison != 0) {
            return impactScoreComparison;
        }

        // If both baseScore and impactScore are the same, compare based on exploitabilityScore
        int exploitabilityScoreComparison = Double.compare(this.cve.metrics.cvssMetricV2.get(0).exploitabilityScore,
                other.cve.metrics.cvssMetricV2.get(0).exploitabilityScore);
        if (exploitabilityScoreComparison != 0) {
            return exploitabilityScoreComparison;
        }

        // If all scores are the same, compare based on CVE-ID
        return this.cve.id.compareTo(other.cve.id);
    }

}